"use strict";(self.webpackChunkarcgis_map_test=self.webpackChunkarcgis_map_test||[]).push([[6299],{16299:(t,e,i)=>{i.r(e),i.d(e,{CalciteIcon:()=>n,defineCustomElement:()=>a});var s=i(62173);
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v2.7.0
 */const n=s.I,a=s.d},62173:(t,e,i)=>{i.d(e,{I:()=>d,d:()=>p});var s=i(30602),n=i(37514),a=i(80901);
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v2.7.0
 */
const c="flip-rtl",o={},r={},l={s:16,m:24,l:32};async function h({icon:t,scale:e}){const i=l[e],n=function(t){const e=!isNaN(Number(t.charAt(0))),i=t.split("-");if(i.length>0){const e=/[a-z]/i;t=i.map(((t,i)=>t.replace(e,(function(t,e){return 0===i&&0===e?t:t.toUpperCase()})))).join("")}return e?`i${t}`:t}(t),a="F"===n.charAt(n.length-1),c=`${a?n.substring(0,n.length-1):n}${i}${a?"F":""}`;if(o[c])return o[c];r[c]||(r[c]=fetch((0,s.OX)(`./assets/icon/${c}.json`)).then((t=>t.json())).catch((()=>(console.error(`"${c}" is not a valid calcite-ui-icon name`),""))));const h=await r[c];return o[c]=h,h}const d=(0,s.w$)(class extends s.wt{constructor(){super(),this.__registerHost(),this.__attachShadow(),this.icon=null,this.flipRtl=!1,this.scale="m",this.textLabel=void 0,this.pathData=void 0,this.visible=!1}connectedCallback(){this.waitUntilVisible((()=>{this.visible=!0,this.loadIconPathData()}))}disconnectedCallback(){this.intersectionObserver?.disconnect(),this.intersectionObserver=null}async componentWillLoad(){this.loadIconPathData()}render(){const{el:t,flipRtl:e,pathData:i,scale:a,textLabel:o}=this,r=(0,n.a)(t),h=l[a],d=!!o,p=[].concat(i||"");return(0,s.h)(s.xr,{"aria-hidden":(0,n.t)(!d),"aria-label":d?o:null,role:d?"img":null},(0,s.h)("svg",{"aria-hidden":"true",class:{[c]:"rtl"===r&&e,svg:!0},fill:"currentColor",height:"100%",viewBox:`0 0 ${h} ${h}`,width:"100%",xmlns:"http://www.w3.org/2000/svg"},p.map((t=>"string"==typeof t?(0,s.h)("path",{d:t}):(0,s.h)("path",{d:t.d,opacity:"opacity"in t?t.opacity:1})))))}async loadIconPathData(){const{icon:t,scale:e,visible:i}=this;if(!s.L2.isBrowser||!t||!i)return;const n=await h({icon:t,scale:e});t===this.icon&&(this.pathData=n)}waitUntilVisible(t){this.intersectionObserver=(0,a.c)("intersection",(e=>{e.forEach((e=>{e.isIntersecting&&(this.intersectionObserver.disconnect(),this.intersectionObserver=null,t())}))}),{rootMargin:"50px"}),this.intersectionObserver?this.intersectionObserver.observe(this.el):t()}static get assetsDirs(){return["assets"]}get el(){return this}static get watchers(){return{icon:["loadIconPathData"],scale:["loadIconPathData"]}}static get style(){return":host{display:inline-flex;color:var(--calcite-ui-icon-color)}:host([scale=s]){inline-size:16px;block-size:16px;min-inline-size:16px;min-block-size:16px}:host([scale=m]){inline-size:24px;block-size:24px;min-inline-size:24px;min-block-size:24px}:host([scale=l]){inline-size:32px;block-size:32px;min-inline-size:32px;min-block-size:32px}.flip-rtl{transform:scaleX(-1)}.svg{display:block}:host([hidden]){display:none}[hidden]{display:none}"}},[1,"calcite-icon",{icon:[513],flipRtl:[516,"flip-rtl"],scale:[513],textLabel:[1,"text-label"],pathData:[32],visible:[32]},void 0,{icon:["loadIconPathData"],scale:["loadIconPathData"]}]);function p(){if("undefined"==typeof customElements)return;["calcite-icon"].forEach((t=>{if("calcite-icon"===t)customElements.get(t)||customElements.define(t,d)}))}p()},80901:(t,e,i)=>{i.d(e,{c:()=>n});var s=i(30602);
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v2.7.0
 */function n(t,e,i){if(!s.L2.isBrowser)return;const n=function(t){class e extends window.MutationObserver{constructor(t){super(t),this.observedEntry=[],this.callback=t}observe(t,e){return this.observedEntry.push({target:t,options:e}),super.observe(t,e)}unobserve(t){const e=this.observedEntry.filter((e=>e.target!==t));this.observedEntry=[],this.callback(super.takeRecords(),this),this.disconnect(),e.forEach((t=>this.observe(t.target,t.options)))}}return"intersection"===t?window.IntersectionObserver:"mutation"===t?e:window.ResizeObserver}(t);return new n(e,i)}}}]);