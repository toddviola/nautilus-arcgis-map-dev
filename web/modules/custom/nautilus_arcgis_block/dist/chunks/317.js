"use strict";(self.webpackChunkarcgis_map_test=self.webpackChunkarcgis_map_test||[]).push([[317],{90317:(e,t,a)=>{a.r(t),a.d(t,{default:()=>k});var r,i=a(90252),s=(a(14309),a(1968)),o=a(51819),n=a(69453),l=a(53991),p=a(17134),u=(a(22333),a(60249),a(92262),a(59585)),d=a(54413),g=a(57116),y=a(11960),c=a(20970),h=a(2095),b=a(61893),v=a(33203),M=a(80469),w=a(9506);const m=new(a(73551).U)("0/0/0",0,0,0,void 0);let A=r=class extends((0,h.d)((0,v.j)((0,b.J)(c.A)))){constructor(){super(...arguments),this.tileInfo=w.A.create({spatialReference:d.A.WebMercator,size:256}),this.type="base-tile",this.fullExtent=new g.A(-20037508.342787,-20037508.34278,20037508.34278,20037508.342787,d.A.WebMercator),this.spatialReference=d.A.WebMercator}getTileBounds(e,t,a,r){const i=r||(0,y.vt)();return m.level=e,m.row=t,m.col=a,m.extent=i,this.tileInfo.updateTileInfo(m),m.extent=void 0,i}fetchTile(e,t,a,r={}){const{signal:i}=r,o=this.getTileUrl(e,t,a),n={responseType:"image",signal:i,query:{...this.refreshParameters}};return(0,s.A)(o??"",n).then((e=>e.data))}async fetchImageBitmapTile(e,t,a,i={}){const{signal:o}=i;if(this.fetchTile!==r.prototype.fetchTile){const r=await this.fetchTile(e,t,a,i);return(0,M.C)(r,e,t,a,o)}const n=this.getTileUrl(e,t,a)??"",l={responseType:"blob",signal:o,query:{...this.refreshParameters}},{data:p}=await(0,s.A)(n,l);return(0,M.C)(p,e,t,a,o)}getTileUrl(){throw new o.A("basetilelayer:gettileurl-not-implemented","getTileUrl() is not implemented")}};(0,i._)([(0,p.MZ)({type:w.A})],A.prototype,"tileInfo",void 0),(0,i._)([(0,p.MZ)({type:["show","hide"]})],A.prototype,"listMode",void 0),(0,i._)([(0,p.MZ)({readOnly:!0,value:"base-tile"})],A.prototype,"type",void 0),(0,i._)([(0,p.MZ)({nonNullable:!0})],A.prototype,"fullExtent",void 0),(0,i._)([(0,p.MZ)()],A.prototype,"spatialReference",void 0),A=r=(0,i._)([(0,u.$)("esri.layers.BaseTileLayer")],A);const f=A;var _=a(29293),T=a(57839),S=a(38431);const Z=new n.J({BingMapsAerial:"aerial",BingMapsRoad:"road",BingMapsHybrid:"hybrid"});let j=class extends((0,h.d)((0,_.q)((0,l.P)(f)))){constructor(e){super(e),this.type="bing-maps",this.tileInfo=new w.A({size:[256,256],dpi:96,origin:new S.A({x:-20037508.342787,y:20037508.342787,spatialReference:d.A.WebMercator}),spatialReference:d.A.WebMercator,lods:[new T.A({level:1,resolution:78271.5169639999,scale:295828763.795777}),new T.A({level:2,resolution:39135.7584820001,scale:147914381.897889}),new T.A({level:3,resolution:19567.8792409999,scale:73957190.948944}),new T.A({level:4,resolution:9783.93962049996,scale:36978595.474472}),new T.A({level:5,resolution:4891.96981024998,scale:18489297.737236}),new T.A({level:6,resolution:2445.98490512499,scale:9244648.868618}),new T.A({level:7,resolution:1222.99245256249,scale:4622324.434309}),new T.A({level:8,resolution:611.49622628138,scale:2311162.217155}),new T.A({level:9,resolution:305.748113140558,scale:1155581.108577}),new T.A({level:10,resolution:152.874056570411,scale:577790.554289}),new T.A({level:11,resolution:76.4370282850732,scale:288895.277144}),new T.A({level:12,resolution:38.2185141425366,scale:144447.638572}),new T.A({level:13,resolution:19.1092570712683,scale:72223.819286}),new T.A({level:14,resolution:9.55462853563415,scale:36111.909643}),new T.A({level:15,resolution:4.77731426794937,scale:18055.954822}),new T.A({level:16,resolution:2.38865713397468,scale:9027.977411}),new T.A({level:17,resolution:1.19432856685505,scale:4513.988705}),new T.A({level:18,resolution:.597164283559817,scale:2256.994353}),new T.A({level:19,resolution:.298582141647617,scale:1128.497176}),new T.A({level:20,resolution:.1492910708238085,scale:564.248588})]}),this.key=null,this.style="road",this.culture="en-US",this.region=null,this.portalUrl=null,this.hasAttributionData=!0}get bingMetadata(){return this._get("bingMetadata")}set bingMetadata(e){this._set("bingMetadata",e)}get copyright(){return null!=this.bingMetadata?this.bingMetadata.copyright:null}get operationalLayerType(){return Z.toJSON(this.style)}get bingLogo(){return null!=this.bingMetadata?this.bingMetadata.brandLogoUri:null}load(e){return this.key?this.addResolvingPromise(this._getMetadata()):this.portalUrl?this.addResolvingPromise(this._getPortalBingKey().then((()=>this._getMetadata()))):this.addResolvingPromise(Promise.reject(new o.A("bingmapslayer:load","Bing layer must have bing key."))),Promise.resolve(this)}getTileUrl(e,t,a){if(!this.loaded||null==this.bingMetadata)return null;const r=this.bingMetadata.resourceSets[0].resources[0],i=r.imageUrlSubdomains[t%r.imageUrlSubdomains.length],s=this._getQuadKey(e,t,a);return r.imageUrl.replace("{subdomain}",i).replace("{quadkey}",s)}async fetchAttributionData(){return this.load().then((()=>null==this.bingMetadata?null:{contributors:this.bingMetadata.resourceSets[0].resources[0].imageryProviders.map((e=>({attribution:e.attribution,coverageAreas:e.coverageAreas.map((e=>({zoomMin:e.zoomMin,zoomMax:e.zoomMax,score:1,bbox:[e.bbox[0],e.bbox[1],e.bbox[2],e.bbox[3]]})))})))}))}_getMetadata(){const e={road:"roadOnDemand",aerial:"aerial",hybrid:"aerialWithLabelsOnDemand"}[this.style];return(0,s.A)(`https://dev.virtualearth.net/REST/v1/Imagery/Metadata/${e}`,{responseType:"json",query:{include:"ImageryProviders",uriScheme:"https",key:this.key,suppressStatus:!0,output:"json",culture:this.culture,userRegion:this.region}}).then((e=>{const t=e.data;if(200!==t.statusCode)throw new o.A("bingmapslayer:getmetadata",t.statusDescription);if(this.bingMetadata=t,0===this.bingMetadata.resourceSets.length)throw new o.A("bingmapslayer:getmetadata","no bing resourcesets");if(0===this.bingMetadata.resourceSets[0].resources.length)throw new o.A("bingmapslayer:getmetadata","no bing resources")})).catch((e=>{throw new o.A("bingmapslayer:getmetadata",e.message)}))}_getPortalBingKey(){return(0,s.A)(this.portalUrl??"",{responseType:"json",authMode:"no-prompt",query:{f:"json"}}).then((e=>{if(!e.data.bingKey)throw new o.A("bingmapslayer:getportalbingkey","The referenced Portal does not contain a valid bing key");this.key=e.data.bingKey})).catch((e=>{throw new o.A("bingmapslayer:getportalbingkey",e.message)}))}_getQuadKey(e,t,a){let r="";for(let i=e;i>0;i--){let e=0;const s=1<<i-1;!!(a&s)&&(e+=1),!!(t&s)&&(e+=2),r+=e.toString()}return r}};(0,i._)([(0,p.MZ)({json:{read:!1,write:!1},value:null})],j.prototype,"bingMetadata",null),(0,i._)([(0,p.MZ)({json:{read:!1,write:!1},value:"bing-maps",readOnly:!0})],j.prototype,"type",void 0),(0,i._)([(0,p.MZ)({type:w.A})],j.prototype,"tileInfo",void 0),(0,i._)([(0,p.MZ)({type:String,readOnly:!0,json:{read:!1,write:!1}})],j.prototype,"copyright",null),(0,i._)([(0,p.MZ)({type:String,json:{write:!1,read:!1}})],j.prototype,"key",void 0),(0,i._)([(0,p.MZ)({type:Z.apiValues,nonNullable:!0,json:{read:{source:"layerType",reader:Z.read}}})],j.prototype,"style",void 0),(0,i._)([(0,p.MZ)({type:["BingMapsAerial","BingMapsHybrid","BingMapsRoad"]})],j.prototype,"operationalLayerType",null),(0,i._)([(0,p.MZ)({type:String,json:{write:!1,read:!1}})],j.prototype,"culture",void 0),(0,i._)([(0,p.MZ)({type:String,json:{write:!1,read:!1}})],j.prototype,"region",void 0),(0,i._)([(0,p.MZ)({type:String,json:{write:!0,read:!0}})],j.prototype,"portalUrl",void 0),(0,i._)([(0,p.MZ)({type:Boolean,json:{write:!1,read:!1}})],j.prototype,"hasAttributionData",void 0),(0,i._)([(0,p.MZ)({type:String,readOnly:!0})],j.prototype,"bingLogo",null),j=(0,i._)([(0,u.$)("esri.layers.BingMapsLayer")],j);const k=j}}]);